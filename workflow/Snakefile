# Snakemake workflow for phased mapping with pairtools
# Juan Caballero
# (C) 2024

import yaml

wildcard_constraints: sample=r".+\d+"

# some subroutines needed
def dump_config_to_yaml(config):
    output_file = "run_config.yaml"
    with open(output_file, 'w') as configfile:
        yaml.dump(config, configfile)

# setting configurations
configfile: "config.yaml"
fastq_dir = str(config['fastq_dir'])
# before running the process
onstart:
    print("\n==== Variant calling pipeline starts ====")
    print("Configuration:")
    print(config)
    print("=" * 80)
    print()
    dump_config_to_yaml(config)

# main workflow
rule all:
    input:
        "07_multiqc/multiqc_report.html"

rule fastp:
    input:
        fq1 = str(fastq_dir) + "/{sample}_R1.fastq.gz",
        fq2 = str(fastq_dir) + "/{sample}_R2.fastq.gz"
    output:
        trim_fq1 = "01_preprocessing/{sample}_R1.fastq.gz",
        trim_fq2 = "01_preprocessing/{sample}_R2.fastq.gz",
        html_rep = "01_preprocessing/{sample}_report.html",
        json_rep = "01_preprocessing/{sample}_report.json"
    threads: 10
    shell:
        """
        fastp \
            -w {threads} \
            -i {input.fq1} \
            -I {input.fq2} \
            -o {output.trim_fq1} \
            -O {output.trim_fq2} \
            -h {output.html_rep} \
            -j {output.json_rep}
        """

rule diploid_genome:
    input:
        genome = str(config["genome"]),
        vcf = str(config["variants"])
    output:
        genome = "02_diploid_genome/diploid_genome.fa.gz"
    threads: 4
    params:
        hap1 = config["hap_1"],
        hap2 = config["hap_2"]
    shell:
        """
        bcftools consensus \
            --fasta-ref {input.genome} \
            --haplotype 1 {input.vcf} \
            --sample {params.hap1} \
            | sed -E 's/(>[^[:space:]]+).*/\\1_{params.hap1}/g' \
            | bgzip -c > genome_{params.hap1}.fa.gz

        bcftools consensus \
            --fasta-ref {input.genome} \
            --haplotype 1 {input.vcf} \
            --sample {params.hap2} \
            | sed -E 's/(>[^[:space:]]+).*/\\1_{params.hap2}/g' \
            | bgzip -c > genome_{params.hap2}.fa.gz

        cat genome_{params.hap1}.fa.gz genome_{params.hap2}.fa.gz \
            > {output.genome}

        rm genome_{params.hap1}.fa.gz genome_{params.hap2}.fa.gz
        """

rule index_diploid_genome:
    input:
        genome = "02_diploid_genome/diploid_genome.fa.gz"
    output:
        index = "02_diploid_genome/diploid_genome.fa.gz.bwt"
    threads: 2
    resources:
      mem_mb = 50000
    shell:
        """
        bwa index {input.genome}
        """

rule chr_sizes:
    input:
        genome = "02_diploid_genome/diploid_genome.fa.gz"
    output:
        chr_sizes = "02_diploid_genome/diploid_genome.chromsizes"
    threads: 1
    shell:
        """
        samtools faidx {input.genome}
        cut -f1,2 {input.genome}.fai > {output.chr_sizes}
        """

rule bwa_mapping:
    input:
        fq1 = "01_preprocessing/{sample}_R1.fastq.gz",
        fq2 = "01_preprocessing/{sample}_R2.fastq.gz",
        genome = "02_diploid_genome/diploid_genome.fa.gz",
        index = "02_diploid_genome/diploid_genome.fa.gz.bwt"
    output:
        bam = "03_mapping/{sample}.bam"
    threads: 30
    params:
      bwathreads = 20
    shell:
        """
        bwa mem \
            -SPu \
            -t {params.bwathreads} \
            {input.genome} \
            {input.fq1} \
            {input.fq2} \
        | samtools view -@ 8 -b \
        > {output.bam}
        """

rule pairtools_parse:
    input:
        bam = "03_mapping/{sample}.bam",
        chr_sizes = "02_diploid_genome/diploid_genome.chromsizes"
    output:
        pairs = "04_pairing/{sample}_unphased_XB.pairs.gz"
    params:
        minmapq = 0,
        cols = 'XB,AS,XS',
    threads: 12
    shell:
        """
        pairtools parse \
            --min-mapq {params.minmapq} \
            --add-columns {params.cols} \
            --drop-sam \
            --walks-policy all \
            -c {input.chr_sizes} \
            {input.bam} \
            -o {output.pairs}
        """

rule pairtools_phase:
    input:
        pairs = "04_pairing/{sample}_unphased_XB.pairs.gz"
    output:
        pairs = "04_pairing/{sample}_phased_XB.pairs.gz"
    params:
        hap1 = config["hap_1"],
        hap2 = config["hap_2"]
    threads: 12
    shell:
        """
        pairtools phase \
            --phase-suffixes _{params.hap1} _{params.hap2} \
            --tag-mode XB \
            --clean-output \
            {input.pairs} -o {output.pairs}

        """

rule pairtools_sort:
    input:
        pairs = "04_pairing/{sample}_phased_XB.pairs.gz"
    output:
        pairs = "04_pairing/{sample}_phased_sorted_XB.pairs.gz"
    threads: 22
    shell:
        """
        pairtools sort \
            {input.pairs} \
            --nproc {threads} \
            -o {output.pairs}
        """

rule pairtools_dedup:
    input:
        pairs = "04_pairing/{sample}_phased_sorted_XB.pairs.gz"
    output:
        pairs = "04_pairing/{sample}_dedup_XB.pairs.gz",
        stats = "04_pairing/{sample}_dedup_XB.stats"
    threads: 10
    shell:
        """
        pairtools dedup \
            --mark-dups \
            --extra-col-pair phase1 phase2 \
            --output-dups - \
            --output-unmapped - \
            --output-stats {output.stats} \
            -o {output.pairs} \
            {input.pairs}
        """

rule pairtools_filter:
    input:
        pairs = "04_pairing/{sample}_dedup_XB.pairs.gz"
    output:
        pairs0 = "05_filter/{sample}_phases_XB_" + config['hap_1'] + ".pairs.gz",
        pairs1 = "05_filter/{sample}_phases_XB_" + config['hap_2'] + ".pairs.gz",
        pairsU = "05_filter/{sample}_phases_XB_unphased.pairs.gz",
        pairsT = "05_filter/{sample}_phases_XB_trans.pairs.gz"       
    threads: 10
    shell:
        """
        pairtools select \
            '(phase1=="0") and (phase2=="0")' \
            {input.pairs} \
            -o {output.pairs0}

        pairtools select \
            '(phase1=="1") and (phase2=="1")' \
            {input.pairs} \
            -o {output.pairs1}
        
        pairtools select \
            '(phase1==".") or (phase2==".")' \
            {input.pairs} \
            -o {output.pairsU}

        pairtools select \
            '(phase1!=phase2) and (phase1!=".") and (phase2!=".") and (phase1!="!") and (phase2!="!")' \
            {input.pairs} \
            -o {output.pairsT}
        """

rule pairtools_stats:
    input:
        pairs0 = "05_filter/{sample}_phases_XB_" + config['hap_1'] + ".pairs.gz",
        pairs1 = "05_filter/{sample}_phases_XB_" + config['hap_2'] + ".pairs.gz",
        pairsU = "05_filter/{sample}_phases_XB_unphased.pairs.gz",
        pairsT = "05_filter/{sample}_phases_XB_trans.pairs.gz"
    output:
        stats0 = "06_stats/{sample}_phases_XB_" + config['hap_1'] + ".stats",
        stats1 = "06_stats/{sample}_phases_XB_" + config['hap_2'] + ".stats",
        statsU = "06_stats/{sample}_phases_XB_unphased.stats",
        statsT = "06_stats/{sample}_phases_XB_trans.stats"
    threads: 10
    shell:
        """
        pairtools stats {input.pairs0} -o {output.stats0}
        pairtools stats {input.pairs1} -o {output.stats1}
        pairtools stats {input.pairsU} -o {output.statsU}
        pairtools stats {input.pairsT} -o {output.statsT}
        """

rule multiqc:
    input:
        statsT = expand("06_stats/{sample}_phases_XB_trans.stats", sample=config['samples'])
    output:
        html = "07_multiqc/multiqc_report.html"
    params:
        odir = "07_multiqc"
    threads: 1
    shell:
        """
        multiqc \
            --module pairtools \
            -o {params.odir} \
            .
        """

onsuccess:
    print("\n==== Workflow finished successfully! ====\n")
